{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CUE Function \n",
    "### This function will take a cobrapy model and give you the CUE based on four definitions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CUEDef(model):\n",
    "    \n",
    "    \n",
    "    # Getting the Uptake and Secretion fluxes from the model \n",
    "    Summary = model.summary()\n",
    "    UptakeSummary = Summary._display_flux(Summary.uptake_flux, False, 'C', 1e-7)\n",
    "    SecretionSummary = Summary._display_flux(Summary.secretion_flux, False, 'C', 1e-7)\n",
    "    \n",
    "    \n",
    "    # First CUE Definition\n",
    "    \n",
    "    # Finding What Uptake Fluxes Have Metabolites with Carbon\n",
    "\n",
    "    UFC = UptakeSummary[UptakeSummary['C-Number'] > 0].index.values\n",
    "\n",
    "    # Finding What Secretion Fluxes Have Metabolites with Carbon\n",
    "\n",
    "    SFC = SecretionSummary[SecretionSummary['C-Number']>0].index.values\n",
    "\n",
    "    CUE1 = 0\n",
    "    CUE2 = 0\n",
    "    for n in UFC:\n",
    "\n",
    "        CUE1 = CUE1 + UptakeSummary.loc[n,'flux']*UptakeSummary.loc[n,'C-Number']\n",
    "\n",
    "    for n in SFC:\n",
    "\n",
    "        CUE2 = CUE2 + SecretionSummary.loc[n,'flux']*SecretionSummary.loc[n,'C-Number']\n",
    "        \n",
    "    FinalCUE1 = (CUE1 + CUE2)/CUE1\n",
    "    \n",
    "    # Second CUE Definition\n",
    "    \n",
    "    for n in SecretionSummary.metabolite.values:\n",
    "    \n",
    "        Forms = getattr(model.metabolites,n).formula\n",
    "    \n",
    "        if (Forms == 'CO2'):\n",
    "        \n",
    "            # Find the location of the flux for Co2\n",
    "        \n",
    "            L = SecretionSummary[SecretionSummary['metabolite']==n].index.values\n",
    "        \n",
    "            CUE22 = SecretionSummary.loc[L,'flux'].values\n",
    "        \n",
    "    FinalCUE2 = (CUE1 + CUE22)/CUE1\n",
    "    \n",
    "    # Third CUE Definition\n",
    "    \n",
    "    solution = model.optimize()\n",
    "    BiomassProd = solution.objective_value\n",
    "    CUE23 = -CUE2 + BiomassProd\n",
    "    FinalCUE3 = BiomassProd/(CUE23)\n",
    "    \n",
    "    # Fourth CUE Definition\n",
    "    \n",
    "    FinalCUE4 = (BiomassProd)/(BiomassProd - CUE22)\n",
    "    \n",
    "    FinalCUETab = pd.DataFrame(np.array([[FinalCUE1],[FinalCUE2],[FinalCUE3],[FinalCUE4]]), columns = ['CUE'],index = ['Def 1','Def 2','Def 3','Def 4'])\n",
    "    \n",
    "    \n",
    "    return FinalCUETab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
